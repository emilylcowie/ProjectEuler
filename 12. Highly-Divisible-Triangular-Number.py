# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#   The first ten terms would be:
#   1, 3, 6, 10, 15, 21, 28, 36, 45, 55

# Let us list the factors of the first seven triangle numbers:
# 3 : 1, 3
# 6 : 1, 2, 3, 6
# 10 : 1, 2, 5, 10
# 15 : 1, 3, 5, 15
# 21 : 1, 3, 7, 21
# 28 : 1, 2, 4, 7, 14, 28

# We can see that 28 is the first triangle number to have over five divisors
# What is the value of the first triangle number to have over five hundred divisors?

def count_divisors(n):
    count = 0
    sqrt_n = int(n**0.5)
    for i in range(1, sqrt_n + 1):
        if n % i == 0:
            count += 2
    if sqrt_n * sqrt_n == n:
        count -= 1
    return count

def find_triangular_number_with_divisors(min_divisors):
    n = 1
    triangular_number = 0
    while True:
        triangular_number += n
        n += 1
        if count_divisors(triangular_number) > min_divisors:
            return triangular_number

result = find_triangular_number_with_divisors(500)
print(result)
